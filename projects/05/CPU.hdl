// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[15], b=instruction[14], out=cInstruction);
    And(a=instruction[5], b=true, out=storeA);
    Or(a=aInstruction, b=storeA, out=loadA);
    And(a=instruction[4], b=cInstruction, out=loadD);
    And(a=instruction[3], b=cInstruction, out=writeM);
    
    Not(in=instruction[0], out=notj3);
    Not(in=instruction[1], out=notj2);
    Not(in=instruction[2], out=notj1);
    And(a=notj1, b=notj2, out=notj1AndNotj2);
    And(a=notj1, b=notj3, out=notj1AndNotj3);
    And(a=notj2, b=notj3, out=notj2AndNotj3); 
    And(a=instruction[2], b=instruction[1], out=j1Andj2);
    And(a=instruction[1], b=instruction[0], out=j2Andj3);
    And(a=instruction[2], b=instruction[0], out=j1Andj3);

    And(a=notj1AndNotj2, b=notj3, out=noJmp);
    And(a=notj1AndNotj2, b=instruction[0], out=jgt);
    And(a=notj1AndNotj3, b=instruction[1], out=jeq);
    And(a=notj1, b=j2Andj3, out=jge);
    And(a=instruction[2], b=notj2AndNotj3, out=jlt);
    And(a=notj2, b=j1Andj3, out=jne);
    And(a=notj3, b=j1Andj2, out=jle);
    And(a=j1Andj2, b=instruction[0], out=jmp);

    And(a=cInstruction, b=noJmp, out=NOJMP);
    And(a=cInstruction, b=jgt, out=JGT);
    And(a=cInstruction, b=jeq, out=JEQ);
    And(a=cInstruction, b=jge, out=JGE);
    And(a=cInstruction, b=jlt, out=JLT);
    And(a=cInstruction, b=jne, out=JNE);
    And(a=cInstruction, b=jle, out=JLE);
    And(a=cInstruction, b=jmp, out=JMP);

    And(a=GE, b=NE, out=GT);
    Not(in=negative, out=GE);
    Not(in=zero, out=NE);
    Or(a=zero, b=negative, out=LE);

    And(a=JGT, b=GT, out=jumpGT);
    And(a=JEQ, b=zero, out=jumpEQ);
    And(a=JGE, b=GE, out=jumpGE);
    And(a=JLT, b=negative, out=jumpLT);
    And(a=JNE, b=NE, out=jumpNE);
    And(a=JLE, b=LE, out=jumpLE);

    Or(a=JMP, b=jumpGT, out=tempA);
    Or(a=tempA, b=jumpGT, out=tempB);
    Or(a=tempB, b=jumpEQ, out=tempC);
    Or(a=tempC, b=jumpGE, out=tempD);
    Or(a=tempD, b=jumpLT, out=tempE);
    Or(a=tempE, b=jumpNE, out=tempF);
    Or(a=tempF, b=jumpLE, out=jump);
    
    // A register
    Mux16(a=instruction, b=aluOut, sel=cInstruction, out=inA);
    ARegister(in=inA, load=loadA, out=A, out[0..14]=addressM);
    
    // alu
    Mux16(a=A, b=inM, sel=instruction[12], out=X);
    ALU(x=D, y=X, zx=instruction[11], nx=instruction[10], zy=instruction[9],
            ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut,
                out=outM, zr=zero, ng=negative);

    // D register
    DRegister(in=aluOut, load=loadD, out=D);

    // program counter
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);

    
}